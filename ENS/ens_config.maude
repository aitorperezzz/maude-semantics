fmod ENS-BANK is

	*** This module defines the bank, which is a set of registers that 
	*** can store values.

	protecting INT .

	var R : RegName .
	vars n n' : Int .
	vars b b' : Bank .

	*** Define a register: a pair of a register name and a value stored in it.
	*** The only values allowed are integers.
	sorts Reg RegName .
	ops R0 R1 R2 R3 R4 R5 R6 R7 : -> RegName [ctor] .
	op <_,_> : RegName Int -> Reg [ctor] .

	*** Define a Bank type, which is the set of all eight registers.
	sort Bank .
	subsort Reg < Bank .
	op NoBank : -> Bank [ctor] .
	op __ : Bank Bank -> Bank [ctor assoc id: NoBank] .

	*** InitBank is the default bank: all values are zero. Serves the purpose of 
	*** initializing all the programs.
	op InitBank : -> Bank [ctor] .
	eq InitBank = < R0, 0 > < R1, 0 > < R2, 0 > < R3, 0 > 
		< R4, 0 > < R5, 0 > < R6, 0 > < R7, 0 > .
	
	*** Define functions to change the content of a register. 
	*** No new registers can be added.
	op _[_/_] : Bank RegName Int -> Bank [ctor] .
	eq (b < R , n > b') [R / n'] = b < R , n' > b' .

	*** Access the value stored in a register
	op _[_] : Bank RegName -> Int [ctor] .
	eq (b < R , n > b') [R] = n .

endfm

fmod ENS-MEMORY is

	*** This module defines the RAM memory that ENS can use.

	protecting ENS-BANK .

	vars M M' : Mem .
	var a : Nat .
	vars n n' : Int .

	*** Define the Mem type, which has pairs of addresses and values stored at
	*** those addresses.
	sorts Mem MemLoc .
	subsort MemLoc < Mem .
	op <_,_> : Nat Int -> MemLoc [ctor] .
	op NoMem : -> Mem [ctor] .
	op __ : Mem Mem -> Mem [ctor assoc comm id: NoMem] .

	*** Define a function that adds elements to memory or modifies 
	*** elements in memory.
	op _[_/_] : Mem Nat Int -> Mem [ctor] .
	eq (M < a, n >) [a / n'] = M < a, n' > .
	eq M [a / n] = M < a, n > [owise] .

	*** Access contents in memory by giving the address.
	op _[_] : Mem Nat ~> Int [ctor] .
	eq (M < a, n >) [a] = n .

endfm

fmod ENS-STATE is

	*** This module gives various tools for the language.

	protecting ENS-BANK .
	protecting ENS-MEMORY .

	var n : Int .
	var d : Nat .
	var b : Bank .
	var nr : NegReg .
	var zr : ZeroReg .
	var cr : CountReg .
	var M : Mem .

	*** Define the three special registers.
	*** The negative indicator will know if a number is negative.
	sort NegReg .
	op < N, _> : Nat -> NegReg [ctor] .
	*** The zero indicator will know if a number is zero.
	sort ZeroReg .
	op < Z, _> : Nat -> ZeroReg [ctor] .
	*** The program counter is a register that knows what to execute next.
	sort CountReg .
	op < PC, _> : Nat -> CountReg [ctor] .

	*** Define operators to work with negative and zero registers.
	op isneg_ : Int -> Nat [ctor] .
	ceq isneg n = 1 if n < 0 .
	ceq isneg n = 0 if n >= 0 .
	op iszero_ : Int -> Nat [ctor] .
	ceq iszero n = 1 if n = 0 .
	ceq iszero n = 0 if n =/= 0 . 
        
        *** Define a State as a set of the eight main registers, the three special registers
	*** and a memory.
	sort State .
	op [_;_;_;_;_] : Bank NegReg ZeroReg CountReg Mem -> State [ctor] .
	
	*** Define an initial state to simplify execution.
	op InitState : -> State [ctor] .
	eq InitState = [ InitBank ; < N, 0 > ; < Z, 0 > ; < PC, 0 > ; NoMem ] .

	*** Define operators to look for information inside a State type.
	*** Acces the value in the three special registers.
	op neg_ : State -> Nat .
	eq neg [ b ; < N, d > ; zr ; cr ; M ] = d .
	op zero_ : State -> Nat .
	eq zero [ b ; nr ; < Z, d > ; cr ; M ]  = d .
	op count_ : State -> Nat .
	eq count [ b ; nr ; zr ; < PC, d > ; M ]  = d .
	
	*** Access the register bank and the memory of a state.
	op bank_ : State -> Bank [ctor] .
	eq bank [ b ; nr ; zr ; cr ; M ]  = b .
	
	op memory_ : State -> Mem [ctor] .
	eq memory [ b ; nr ; zr ; cr ; M ]  = M .
	
endfm

fmod ENS-SYNTAX is

	*** This module defines the basic syntax of the language.

	protecting ENS-STATE .
        
        *** Define the legal instructions in ENS. A statement Stm is a pair of a number, which is 
        *** the adress of the instruction in memory, and then the instruction.
        *** A program is a list of statements, back to back
        
	*** Define a statement, which is a pair of an instruction, and a number that 
	*** identifies that instruction.
	*** Define a Prog, which is a list of statements.
        sort Inst Stm Prog .
	subsort Stm < Prog .
	op {_;_} : Nat Inst -> Stm [ctor] .
	op NoStm : -> Stm [ctor] .
	op __ : Prog Prog -> Prog [ctor assoc id: NoStm] .
	
	
	*** Define the arithmetic instructions.
	op ADD __,_ : RegName RegName RegName -> Inst [ctor] .
	op SUB __,_ : RegName RegName RegName -> Inst [ctor] .
	op AND __,_ : RegName RegName RegName -> Inst [ctor] .
	op ADDI __,_ : RegName Nat RegName -> Inst [ctor] .
	op SUBI __,_ : RegName Nat RegName -> Inst [ctor] .
	
	*** Define instructions to exchange information between 
	*** the register bank and the memory.
	op LOAD _(_),_ : Nat RegName RegName -> Inst [ctor] .
	op STORE _,_(_) : RegName Nat RegName -> Inst [ctor] .

	*** Define the jump instructions.
	op BL_ : Nat -> Inst [ctor] .
	op BG_ : Nat -> Inst [ctor] .
	op BEQ_ : Nat -> Inst [ctor] .
	op BNE_ : Nat -> Inst [ctor] .
	op BLE_ : Nat -> Inst [ctor] .
	op BGE_ : Nat -> Inst [ctor] .
	op BR_ : Nat -> Inst [ctor] .
	
endfm
