load ens_config.maude .

mod ENS-SEMANTICS is

	protecting ENS-SYNTAX .

	var b : Bank .
	var nr : NegReg .
	var zr : ZeroReg .
	var cr : CountReg .
	vars M M' : Mem .
	vars R R' R'' : RegName .
	vars q n z c c' : Nat .
	var t : Int .
	vars P P' : Prog .
	var m : Int .

	*** Define the evaluation of a program in a certain State
	sort ProgEval .
	op exec(_,_) : Prog State -> ProgEval .

	*** Rewrite rules for arithmetic instructions, only registers.
	*** When the register is not R0, update special registers and change value in register. If the register
	*** is R0, only update the special registers.
	crl [add-notR0] : exec( P { c ; ADD R R', R'' } P' , [ b ; < N, n > ; < Z, z > ; < PC, c > ; M ] ) => 
		exec( P { c ; ADD R R', R'' } P' , [ b[R'' / m] ; < N, isneg m > ; < Z, iszero m > ; < PC, s(c) > ; M ] ) 
		if (b[R] + b[R']) => m /\ R'' =/= R0 .
	crl [add-R0] : exec( P { c ; ADD R R', R'' } P' , [ b ; < N, n > ; < Z, z > ; < PC, c > ; M ] ) => 
		exec( P { c ; ADD R R', R'' } P' , [ b ; < N, isneg m > ; < Z, iszero m > ; < PC, s(c) > ; M ] ) 
		if (b[R] + b[R']) => m /\ R'' == R0 .

	crl [sub-notR0] : exec( P { c ; SUB R R', R'' } P' , [ b ; < N, n > ; < Z, z > ; < PC, c > ; M ] ) => 
		exec( P { c ; SUB R R', R'' } P' , [ b[R'' / m] ; < N, isneg m > ; < Z, iszero m > ; < PC, s(c) > ; M ] ) 
		if b[R] - b[R'] => m /\ R'' =/= R0 .
	crl [sub-R0] : exec( P { c ; SUB R R', R'' } P' , [ b ; < N, n > ; < Z, z > ; < PC, c > ; M ] ) => 
		exec( P { c ; SUB R R', R'' } P' , [ b ; < N, isneg m > ; < Z, iszero m > ; < PC, s(c) > ; M ] ) 
		if b[R] - b[R'] => m /\ R'' == R0 .

	*** Rewrite rules for arithmetic instructions, with inmediates.
	crl [addinmed-notR0] : exec( P { c ; ADDI R t, R'' } P' , [ b ; nr ; zr ; < PC, c > ; M ] ) => 
		exec( P { c ; ADDI R t, R'' } P' , [ b[R'' / m] ; < N, isneg m > ; < Z, iszero m > ; < PC, s(c) > ; M ] ) 
		if b[R] + t => m /\ R'' =/= R0 .
	crl [addinmed-R0] : exec( P { c ; ADDI R t, R'' } P' , [ b ; nr ; zr ; < PC, c > ; M ] ) => 
		exec( P { c ; ADDI R t, R'' } P' , [ b ; < N, isneg m > ; < Z, iszero m > ; < PC, s(c) > ; M ] ) 
		if b[R] + t => m /\ R'' == R0 .

	crl [subinmed-notR0] : exec( P { c ; SUBI R t, R'' } P' , [ b ; < N, n > ; < Z, z > ; < PC, c > ; M ] ) => 
		exec( P { c ; SUBI R t, R'' } P' , [ b[R'' / m] ; < N, isneg m > ; < Z, iszero m > ; < PC, s(c) > ; M ] ) 
		if b[R] - t => m /\ R'' =/= R0 .
	crl [subinmed-R0] : exec( P { c ; SUBI R t, R'' } P' , [ b ; < N, n > ; < Z, z > ; < PC, c > ; M ] ) => 
		exec( P { c ; SUBI R t, R'' } P' , [ b ; < N, isneg m > ; < Z, iszero m > ; < PC, s(c) > ; M ] ) 
		if b[R] - t => m /\ R'' == R0 .
        
        
        *** Rewrite rules for information exchange instructions.
	*** For the LOAD operation, if the destination register is R0, only update
	*** the special registers.
	crl [load-notR0] : exec( P { c ; LOAD q (R), R' } P' , [ b ; nr ; zr ; < PC, c > ; M ] ) => 
		exec(P { c ; LOAD q (R), R' } P' , [ b[R' / m] ; < N, isneg m > ; < Z, iszero m > ; < PC, s(c) > ; M ]) 
		if M[ q + b[R]] => m /\ R' =/= R0 .
	crl [load-R0] : exec( P { c ; LOAD q (R), R' } P' , [ b ; nr ; zr ; < PC, c > ; M ] ) => 
		exec(P { c ; LOAD q (R), R' } P' , [ b ; < N, isneg m > ; < Z, iszero m > ; < PC, s(c) > ; M ]) 
		if M[ q + b[R]] => m /\ R' == R0 .
	rl [store] : exec( P { c ; STORE R, q (R') } P' , [ b ; nr ; zr ; < PC, c > ; M ] ) => 
		exec( P { c ; STORE R, q (R') } P' , [ b ; nr ; zr ; < PC, s(c) > ; M[(q + b[R']) / b[R]] ] ) .


	*** Rewrite rules for jump instructions

	*** Jump if the number was strictly less than zero.
	crl [jump-less-true] : exec( P { c ; BL c' } P' , [ b ; < N, n > ; zr ; < PC, c > ; M ] ) => 
		exec( P { c ; BL n } P' , [ b ; < N, n > ; zr ; < PC, c' > ; M ] ) if n == 1 .
	crl [jump-less-false] : exec( P { c ; BL c' } P' , [ b ; < N, n > ; zr ; < PC, c > ; M ] ) => 
		exec( P { c ; BL n } P' , [ b ; < N, n > ; zr ; < PC, s(c) > ; M ] ) if n == 0 .

	*** Jump if the number was strictly greater than zero.
	crl [jump-greater-true] : exec( P { c ; BG c' } P' , [ b ; < N, n > ; < Z, z > ; < PC, c > ; M ] ) => 
		exec( P { c ; BG c' } P' , [ b ; < N, n > ; < Z, z > ; < PC, c' > ; M ] ) if n == 0 and z == 0 .
	crl [jump-greater-false] : exec( P { c ; BG c' } P' , [ b ; < N, n > ; < Z, z > ; < PC, c > ; M ] ) => 
		exec( P { c ; BG c' } P' , [ b ; < N, n > ; < Z, z > ; < PC, s(c) > ; M ] ) if not(n == 0 and z == 0) .

	*** Jump if the number was zero.
	crl [jump-equal-tue] : exec( P { c ; BEQ c' } P' , [ b ; nr ; < Z, z > ; < PC, c > ; M ] ) => 
		exec( P { c ; BEQ c' } P' , [ b ; nr ; < Z, z > ; < PC, c' > ; M ] ) if z == 1 .
	crl [jump-equal-false] : exec( P { c ; BEQ c' } P' , [ b ; nr ; < Z, z > ; < PC, c > ; M ] ) => 
		exec( P { c ; BEQ c' } P' , [ b ; nr ; < Z, z > ; < PC, s(c) > ; M ] ) if z == 0 .

	*** Jump if the number was different from zero.
	crl [jump-diff-true] : exec( P { c ; BNE c' } P' , [ b ; nr ; < Z, z > ; < PC, c > ; M ] ) => 
		exec( P { c ; BNE c' } P' , [ b ; nr ; < Z, z > ; < PC, c' > ; M ] ) if z == 0 .
	crl [jump-diff-false] : exec( P { c ; BNE c' } P' , [ b ; nr ; < Z, z > ; < PC, c > ; M ] ) => 
		exec( P { c ; BNE c' } P' , [ b ; nr ; < Z, z > ; < PC, s(c) > ; M ] ) if z == 1 .

	*** Jump if the number was less than or equal to zero.
	crl [jum-leq-true] : exec( P { c ; BLE c' } P' , [ b ; < N, n > ; < Z, z > ; < PC, c > ; M ] ) => 
		exec( P { c ; BLE c' } P' , [ b ; < N, n > ; < Z, z > ; < PC, c' > ; M ] ) if n == 1 or z == 1 .
	crl [jum-leq-false] : exec( P { c ; BLE c' } P' , [ b ; < N, n > ; < Z, z > ; < PC, c > ; M ] ) => 
		exec( P { c ; BLE c' } P' , [ b ; < N, n > ; < Z, z > ; < PC, s(c) > ; M ] ) if not(n == 1 or z == 1) .

	*** Jump if the number was greater than or equal to zero.
	crl [jump-geq-true] : exec( P { c ; BGE c' } P' , [ b ; < N, n > ; < Z, z > ; < PC, c > ; M ] ) => 
		exec( P { c ; BGE n } P' , [ b ; < N, n > ; < Z, z > ; < PC, c' > ; M ] ) if n == 0 or z == 1 .
	crl [jump-geq-false] : exec( P { c ; BGE c' } P' , [ b ; < N, n > ; < Z, z > ; < PC, c > ; M ] ) => 
		exec( P { c ; BGE n } P' , [ b ; < N, n > ; < Z, z > ; < PC, s(c) > ; M ] ) if not(n == 0 or z == 1) .

	*** Jump without a condition.
	rl [jump] : exec( P { c ; BR c' } P' , [ b ; nr ; zr ; < PC, c > ; M ] ) => 
		 exec( P { c ; BR c' } P' , [ b ; nr ; zr ; < PC, c' > ; M ] ) .

endm
