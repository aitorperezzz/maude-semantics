fmod GREP-SYNTAX is

	*** This GREP-like command will decide if a certain string of characters belongs
	*** to the language specified by a regular expression.

	protecting STRING .

	*** Strings are regular expressions on their own.
	sort RegExp .
	subsort String < RegExp .

	*** Epsilon is a regular expression, which by definition will match the empty string.
	op Epsilon : -> RegExp [ctor] .


	*** Operators on regular expressions.

	*** SUM operator.
	op _s_ : RegExp RegExp -> RegExp [ctor assoc comm prec 33] .

	*** CONCATENATION operator.
	op _._ : RegExp RegExp -> RegExp [ctor assoc prec 32] .

	*** STAR, or Kleene star.
	op _* : RegExp -> RegExp [ctor prec 31] .

	*** Specify how the user has to execute this tool.
	sort Exec .
	op is _ in _ : String RegExp -> Exec .

endfm

fmod GREP-UTILS is

	*** This module contains auxiliary functions for the tool.

	protecting STRING .
	protecting INT .

	var s : String .
	var n : Int .

	*** We will need to separate a string into two strings. Define a list of separations
	*** of a certain string.
	sorts Sep SepList .
	subsort Sep < SepList .
	op EmptySep : -> Sep [ctor] .
	op {_,_} : String String -> Sep [ctor] .
	op __ : SepList SepList -> SepList [ctor assoc id: EmptySep] .

	*** Define an operator that will receive a natural number l and a string s and will give back
	*** the separation of the string in which the first string has length l, and then will 
	*** call itself (recursively) with natural number s(l).
	op divisions(_,_) : Int String -> SepList [ctor] .
	
	ceq divisions( n, s ) = { substr( s, 0, n ) , substr( s, n, length(s) - n ) }
		divisions( s(n), s ) if n < length(s) .
	ceq divisions( n, s ) = { s, "" } if length(s) == n .

	*** Operator frontSplit gives all the possible splits of a string w,
	*** without the possibility of { "", w }.
	op frontSplit_ : String -> SepList [ctor] .
	eq frontSplit s = divisions( 1, s ) .

	*** Operator split is the same as frontSplit except it adds at the front
	*** the possibility of { "", w }.
	op split_ : String -> SepList [ctor] .
	eq split s = { "", s } frontSplit s .

endfm

