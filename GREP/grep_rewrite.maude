load grep_config.maude .

mod GREP-REWRITE is

	*** Rewrite rules for the GREP tool.

	protecting GREP-SYNTAX .
	protecting GREP-UTILS .

	vars s s' s1 s2 : String .
	vars A B : RegExp .
	vars sl sl' : SepList .

	*** Some operators do not need the splitting of the string to work. Concatenation needs the
	*** split, and Kleene star needs the frontSplit. We design an operator called askfor, which
	*** will transform to a split when concatenation and to a frontSplit when Kleene star.
	*** An execution will consist of a string, a regular expression, and a possible splitting.

	subsort Bool < Exec .
	op <_,_,_> : String RegExp SepList -> Exec .
	op askfor : -> SepList [ctor] .

	*** First, rewrite the user's input.
	rl [initial] : is s in A => < s, A, askfor > .
	

	*** Base case: strings, including the empty string.
	rl [epsilon-true] : < "", Epsilon, sl > => true .
	crl [epsilon-false] : < s, Epsilon, sl > => false if s =/= "" .
	rl [string-true] : < s, s, sl > => true .
	crl [string-false] : < s, s', sl > => false if s =/= s' .


	*** Rewrite the askfor element depending on the operator. 
	rl [give-split] : < s, A . B, askfor > => < s, A . B, split s > .
	rl [give-frontsplit] : < s, A *, askfor > => < s, A *, frontSplit s > .


	*** Rules for the three main operators.

	*** SUM operator is true if the right or the left side matches,
	*** false when none of the sides match.
	crl [sum-true] : < s, A s B, sl > => true
		if < s, A, askfor > => true .
	crl [sum-true] : < s, A s B, sl > => true
		if < s, B, askfor > => true .
	crl [sum-false] : < s, A s B, sl > => false
		if < s, A, askfor > => false /\
		< s, B, askfor > => false  .

	*** CONCATENATION is true if any of the splittings matches, it is false
	*** if the regular expressions cannot match the regular expressions.
	crl [concat-true] : < s, A . B, sl { s1, s2 } sl' > => true
		if < s1, A, askfor > => true /\ < s2, B, askfor > => true .
	crl [concat-false] : < s, A . B, sl > => false
		if < s, A, askfor > => false .
	crl [concat-false] : < s, A . B, sl > => false
		if < s, B, askfor > => false .


	*** STAR operator is true if the string is the empty string, or if some splitting 
	*** has a first string that matches A and a second string that matches A*.
	crl [star-empty] : < s, A *, sl > => true if s == "" .
	crl [star-string] : < s, A *, sl > => true if < s, A, askfor > => true .
	crl [star-recursive] : < s, A *, sl { s1, s2 } sl' > => true
		if < s1, A, askfor > => true /\ < s2, A *, askfor > => true .
	*** STAR operator is false whenever the regular expression in front of it
	*** isn't found in the string
	crl [star-false] : < s, A *, sl > => false
		if < s, A, askfor > => false .

endm


