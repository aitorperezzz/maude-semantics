fmod GREP-SYNTAX is

	protecting STRING .

	*** This grep-like command will search if certain string matches an element of the language specified by
	*** a regular expression. Strings (and characters) are regular expressions by themselves
	sort RegExp .
	subsort String < RegExp .
	
	
	*** Epsilon is a regular expression, and will match the empty string
	op Epsilon : -> RegExp [ctor] .


	*** Syntax of regular expressions

	*** SUM operator
	op _r+_ : RegExp RegExp -> RegExp [ctor assoc comm prec 27] .

	*** CONCATENATION operator
	op _r._ :  RegExp RegExp -> RegExp [ctor assoc prec 26] .

	*** STAR, or Kleene star
	op _r* : RegExp -> RegExp [ctor prec 25] .


	*** A Prog will recieve a regular expression and a string where is has to find matches
	sort Prog .
	op search {_} in {_} : RegExp String -> Prog .

endfm

fmod GREP-UTILS is

	protecting NAT .
	protecting STRING .

	
	sorts Sep SepList .
	subsort Sep < SepList .
	op EmptySep : -> Sep [ctor] .
	op {_,_} : String String -> Sep [ctor] .
	op __ : SepList SepList -> SepList [ctor assoc id: EmptySep] .

	
	*** firstnumber accepts a number l and a string, and returns the division of the string where
	*** the first element hast length l
	op firstnumber(_,_) : Nat String -> SepList [ctor] .
	var w : String .
	var l : Nat .
	ceq firstnumber( l, w ) = { substr( w, 0, l ) , substr( w, l, sd( length(w), l ) ) } firstnumber( s(l), w ) 
		if l < length(w) .
	ceq firstnumber( l, w ) = { w, "" } if l == length(w) . 

	*** frontsplit gives all the possible splits of a string, without the possibility of
	*** ( "", string )
	op frontsplit_ : String -> SepList [ctor] .
	eq frontsplit w = firstnumber( 1, w ) .

	*** The operator split is the same as frontsplit except it adds at the front the possibility of
	*** ( "", string )
	op split_ : String -> SepList [ctor] .
	eq split w = { "", w } frontsplit w .


endfm
