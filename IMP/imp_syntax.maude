fmod IMP-SORTS is

	*** This module defines the sorts of the language.

	protecting QID .
	protecting INT .

	sort Var .
	subsort Qid < Var .

	sort AritExp .
	subsort Int < AritExp .	
	subsort Var < AritExp .

	sort BoolExp .

	sort Prog .

endfm

fmod IMP-STACK is

	*** This module specifies the stack, which is a list of variable-value pairs.

	protecting IMP-SORTS .
	
	var S : Stack .
	vars n n' : Int .
	var v : Var .
	
	sorts StackCell Stack .
	subsort StackCell < Stack .

	op <_,_> : Var Int -> StackCell [ctor] .

	op NoStack : -> Stack [ctor] .
	op __ : Stack Stack -> Stack [ctor comm assoc id: NoStack] .

	*** Change or add elements to the stack.
	op _[_/_] : Stack Var Int -> Stack .
	eq (S < v, n >) [v / n'] = S < v, n' > .
	eq S [v / n] = S < v, n > [owise] .

	*** Access an element in the stack, if it is there.
	op _[_] : Stack Var ~> Int .
	eq (S < v, n >) [v] = n .

endfm

fmod IMP-BASIC-SYNTAX is

	*** This module specifies the basic syntax.

	protecting IMP-STACK .

	*** Syntax of arithmetic expressions.
	op _+_ : AritExp AritExp -> AritExp [ditto] .
	op _-_ : AritExp AritExp -> AritExp [ditto] .
	op _*_ : AritExp AritExp -> AritExp [ditto] .

	*** Syntax of boolean expresions.
	ops true false : -> BoolExp [ctor] .
	op _==_ : AritExp AritExp -> BoolExp [comm prec 26] .
	op _!=_ : AritExp AritExp -> BoolExp [comm prec 26] .
	op _leq_ : AritExp AritExp -> BoolExp .
	op _geq_ : AritExp AritExp -> BoolExp .
	op not_ : BoolExp -> BoolExp .
	op _and_ : BoolExp BoolExp -> BoolExp [assoc comm] .
	op _or_ : BoolExp BoolExp -> BoolExp [assoc comm] .

	*** Syntax of statements.
	op skip : -> Prog [ctor] .
	op _=_ : Var AritExp -> Prog [ctor prec 30] .
	op _;_ : Prog Prog -> Prog [ctor assoc] .
	op if (_) {_} else {_} : BoolExp Prog Prog -> Prog [ctor] .
	op while (_) {_} : BoolExp Prog -> Prog [ctor] .
	op return _ : AritExp -> Prog [ctor] .

endfm

fmod IMP-FUNCTIONS-SYNTAX is

	*** This module specifies the syntax of function calls.
	
	protecting IMP-BASIC-SYNTAX .

	*** Define lists of variables for the definition of a function.
	sort VarList .
	subsort Var < VarList .
	op void : -> VarList [ctor] .
	op _,_ : VarList VarList -> VarList [ctor assoc id: void] .

	*** Define lists of what can be passed to a function: arithmetic expressions.
	sort AritExpList .
	subsort AritExp < AritExpList .
	subsort VarList < AritExpList .
	op _,_ : AritExpList AritExpList -> AritExpList [ctor assoc id: void] .
	
	*** Define the function sort.
	sorts FuncName Func .
	subsort Qid < FuncName .

	*** How to write a function.
	op function _ (_) {_} : FuncName VarList Prog -> Func [ctor] .

	*** Syntax of a function call.
	op _(_) : FuncName AritExpList -> AritExp [ctor] .  

endfm

fmod IMP-SCRIPT is
	
	*** Define the sort Script.

	protecting IMP-FUNCTIONS-SYNTAX .

	*** Define a list of functions to specify in the script.
	sort FuncList .
	subsort Func < FuncList .
	op NoFunc : -> FuncList [ctor] .
	op __ : FuncList FuncList -> FuncList [ctor assoc comm id: NoFunc] .

	sort Script .
	op main{_} : Prog -> Script [ctor] .
	op main{_}_ : Prog FuncList -> Script [ctor] .

endfm

fmod IMP-GIVESTACK is
	
	*** This module specifies the operator to give each function its own
	*** Stack for execution.

	protecting IMP-SCRIPT .

	var S : Stack .
	var fl : FuncList .

	op giveStack [__;_;_] : VarList AritExpList FuncList Stack -> Stack [ctor] .

	*** Look in the semantics file for the semantics of this operator.
	
	*** Return the empty stack when there is no input left.
	eq giveStack [ ( void ) ( void ) ; fl ; S ] = NoStack . 

endfm

fmod IMP-EXECUTION is 

	*** This module specifies how to write a script, and the main exec sorts.

	protecting IMP-GIVESTACK .

	sorts Exec AritExec BoolExec .
	subsort AritExp < AritExec .
	subsort BoolExp < BoolExec .

	op exec_ : Script -> Exec [ctor] .

	op <_,_,_> : Prog FuncList Stack -> Exec [ctor] .
	op <_,_,_> : AritExp FuncList Stack -> AritExec [ctor] .
	op <_,_,_> : BoolExp FuncList Stack -> BoolExec [ctor] .

endfm

