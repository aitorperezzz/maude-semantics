load imp_utils.maude .

fmod IMP-BASIC-SYNTAX is

	*** This module specifies the basic syntax.

	protecting IMP-STACK .

	*** Syntax of arithmetic expressions.
	op _+_ : AritExp AritExp -> AritExp [ditto] .
	op _-_ : AritExp AritExp -> AritExp [ditto] .
	op _*_ : AritExp AritExp -> AritExp [ditto] .

	*** Syntax of boolean expresions.
	ops true false : -> BoolExp [ctor] .
	op _==_ : AritExp AritExp -> BoolExp [comm prec 26] .
	op _!=_ : AritExp AritExp -> BoolExp [comm prec 26] .
	op _leq_ : AritExp AritExp -> BoolExp .
	op _geq_ : AritExp AritExp -> BoolExp .
	op not_ : BoolExp -> BoolExp .
	op _and_ : BoolExp BoolExp -> BoolExp [assoc comm] .
	op _or_ : BoolExp BoolExp -> BoolExp [assoc comm] .

	*** Syntax of statements.
	op skip : -> Prog [ctor] .
	op _=_ : NumVar AritExp -> Prog [ctor prec 30] .
	op _=_ : ArrayVar Array -> Prog [ctor] .
	op _;_ : Prog Prog -> Prog [ctor assoc] .
	op if (_) {_} else {_} : BoolExp Prog Prog -> Prog [ctor] .
	op while (_) {_} : BoolExp Prog -> Prog [ctor] .
	op return _ : AritExp -> Prog [ctor] .
	op return _ : Array -> Prog [ctor] .

endfm

fmod IMP-FUNCTIONS-SYNTAX is

	*** This module specifies the syntax of function calls.
	
	protecting IMP-BASIC-SYNTAX .

	*** Define lists of variables for the definition of a function.
	*** Only variables and arrays.
	sort VarList .
	subsort NumVar < VarList .
	subsort ArrayVar < VarList .
	op void : -> VarList [ctor] .
	op _,_ : VarList VarList -> VarList [ctor assoc id: void] .

	*** Define lists of what can be passed to the function on a function call.
	sorts Arg ArgList .
	subsort Arg < ArgList .
	subsort AritExp < Arg .
	subsort ArrayVar < Arg .
	subsort VarList < ArgList .
	op _,_ : ArgList ArgList -> ArgList [ctor assoc id: void] .
	
	*** Define the Func type.
	sorts FuncName Func .
	subsort Qid < FuncName .

	*** How to write a function.
	op function _ (_) {_} : FuncName VarList Prog -> Func [ctor] .

	*** Syntax of a function call.
	op _(_) : FuncName AritExp -> AritExp [ctor] .  

endfm

fmod IMP-SCRIPT is
	
	*** Define the sort Script.

	protecting IMP-FUNCTIONS-SYNTAX .

	*** Define a list of functions to specify in the script.
	sort FuncList .
	subsort Func < FuncList .
	op NoFunc : -> FuncList [ctor] .
	op __ : FuncList FuncList -> FuncList [ctor assoc comm id: NoFunc] .

	sort Script .
	op main{_} : Prog -> Script [ctor] .
	op main{_}_ : Prog FuncList -> Script [ctor] .

endfm

fmod IMP-GIVESTACK is
	
	*** This module specifies the operator to give each function its own
	*** Stack for execution.

	protecting IMP-SCRIPT .

	vars v b : Var .
	var vl : VarList .
	var arl : ArgList .
	var n : Int .
	var S : Stack .

	op giveStack [___] : VarList ArgList Stack -> Stack [ctor] .

	*** The semantics will specify how this operator works.
	***eq giveStack [ ( v, vl ) ( b, al ) S ] = < v, S [ b ] > giveStack [ vl al S ] .
	***eq giveStack [ ( v, vl ) ( n, al ) S ] = < v, n > giveStack [ vl al S ] .
	eq giveStack [ ( void ) ( void ) S ] = NoStack . 

endfm

