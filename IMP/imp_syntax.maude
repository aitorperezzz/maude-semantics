load imp_defs.maude .

fmod IMP-BASIC-SYNTAX is

	*** This module specifies the basic syntax.

	protecting IMP-MEMORY .

	*** Syntax of arithmetic expressions.
	sort AritExp .
	subsort Var < AritExp .
	subsort Int < AritExp .
	

	*** Syntax of boolean expresions.
	sort BoolExp .
	

	*** Syntax of statements.
	

endfm

fmod IMP-FUNCTIONS-SYNTAX is

	*** This module specifies the syntax of function calls.
	
	protecting IMP-BASIC-SYNTAX .

	*** Define lists of variables for the declaration of a function.
	sort VarList .
	subsort Var < VarList .
	op void : -> VarList [ctor] .
	op _,_ : VarList VarList -> VarList [ctor assoc id: void] .

	*** Define lists of arithmetic expressions for the function calls from scripts.
	sort AritExpList .
	subsort AritExp < AritExpList .
	subsort VarList < AritExpList .
	op _,_ : AritExpList AritExpList -> AritExpList [ctor assoc id: void] .
	
	*** Define the Func type.
	sorts FuncName Func .
	subsort Qid < FuncName .

	

endfm

fmod IMP-OBJECTS-SYNTAX is
	
	*** This module specifies the syntax of classes, to be able to create objects.

	protecting IMP-FUNCTIONS-SYNTAX .
	
	sort Class ClassName ObjectVar ClassVar ClassFunc .
	subsort Qid < ObjectVar .
	subsort Qid < ClassName .
	subsort ClassVar < AritExp .
	subsort ClassVar < VarList .
	***subsort Func < ClassFunc .

	op _=_ : ClassVar AritExp -> Prog [ditto] .

	*** Define the object's variables.
	op _._ : ObjectVar Var -> ClassVar [ctor] .
	op this ._ : Var -> ClassVar [ctor] .

	*** Define the object's functions.
	sort ClassFuncList . 
	subsort ClassFunc < ClassFuncList .
	op EmptyClassFuncList : -> ClassFuncList [ctor] .
	op __ : ClassFuncList ClassFuncList -> ClassFuncList [ctor assoc id: EmptyClassFuncList] .
	op _(_) {_} : FuncName VarList Prog -> CLassFunc [ctor] .
	op _._(_) : ObjectVar FuncName AritExpList -> AritExp .

	*** Define thes syntax to write a class.
	op class _ {_} : ClassName ClassFuncList -> Class [ctor] .

	*** Define the syntax to create a new instance of an object.
	op _ = new _(_) : ObjectVar ClassName AritExpList -> Prog [ctor] .

	*** A special function in a class is its constructor function.
	op constructor(_) {_} : VarList Prog -> ClassFunc [ctor] .

	*** Define what a list of numbers is. Will be useful for the semantics of 
	*** running the constructor function.
	sort NumberList .
	subsort Int < NumberList .
	subsort NumberList < AritExpList .
	op _,_ : NumberList NumberList -> NumberList [ctor assoc id: void] .

endfm

fmod IMP-MEMORY is

	*** This module specifies the memory, which will consist of a stack for the global
	*** variables, and then a reserved stack for each object.

	protecting IMP-OBJECTS-SYNTAX .

	var c : ClassName .
	var o : ObjectVar .
	var v : Var .
	var M : Memory .
	***var z : ClassVar .
	var S : Stack .
	vars N N' : Int .
	var x : ObjectVar .

	sorts Memory MainMemory ClassMemory ThisMemory .
	subsort MainMemory < Memory .
	subsort ClassMemory < Memory .
	subsort ThisMemory < Memory .
	op EmptyMemory : -> Memory [ctor] .
	op [main] _ : Stack -> MainMemory [ctor] .
	op [ this ; _] _ : ClassName Stack -> ThisMemory [ctor] .
	op [_;_] _ : ObjectVar ClassName Stack -> ClassMemory [ctor] .
	op __ : Memory Memory -> Memory [ctor assoc comm id: EmptyMemory] .


	*** Access elements in memory.
	*** Global variables.
	op _[_] : Memory Var ~> Int [ctor] .
	eq M [ v ] = main M [ v ] .
	*** Object variables
	op _[_] : Memory ClassVar ~> Int [ctor] .
	eq M [ o . v ] = object M [ o . v ] .
	eq M [ this . v ] = this M [ this . v ] .

	*** Change or add elements to memory.
	*** Global variables.
	op _[_/_] : Memory Var Int -> Memory [ctor] .
	eq M [ v / N ] = main M [ v / N ] .
	*** Object variables.
	op _[_/_] : Memory ClassVar Int -> Memory [ctor] .
	eq M [ ( o . v ) / N ] = object M [ ( o . v ) / N ] .
	eq M [ ( this . v ) / N ] = this M [ ( this . v ) / N ] .

	*** Access elements in memory, specific definitions.
	*** Case of global variables.
	op main _[_] : Memory Var ~> Int [ctor] .
	eq main (M [main] ( S < v, N > ) ) [v] = N .
	*** Case of other objects's variables.
	op object _[_] : Memory ClassVar ~> Int [ctor] .
	eq object (M [ o ; c ] ( S < v, N > ) ) [ ( o . v ) ] = N .
	*** Case of object's own variables.
	op this _[_] : Memory ClassVar ~> Int [ctor] .
	eq this (M [ this ; c ] ( S < v, N > ) ) [ ( this . v ) ] = N .

	*** Change values or add elements to memory, specific definitions.
	*** Case of global variables.
	op main _[_/_] : Memory Var Int -> Memory .
	eq main (M [main] (S < v, N >) ) [v / N'] = M ( [main] (S < v, N' > ) ) .
	eq main (M [main] S) [v / N] = M ( [main] ( S < v, N > ) ) [owise] .
	*** Case of other objects' variables.
	op object _[_/_] : Memory ClassVar Int -> Memory .
	eq object (M [o ; c] ( S < v, N > ) ) [ ( o . v )  / N'] = M [o ; c] (S < v, N' >) .
	eq object (M [o ; c] S) [ o . v / N] = M [o ; c] ( S < v, N > ) [owise] .
	*** Case of object's own variables.
	op this _[_/_] : Memory ClassVar Int -> Memory .
	eq this (M [this ; c] ( S < v, N > ) ) [ ( this . v )  / N'] = M [this ; c] ( S < v, N' > ) .
	eq this (M [this ; c] S) [ ( this . v ) / N] = M [this ; c] ( S < v, N > ) [owise] .

endfm

fmod IMP-EXTRAS-SYNTAX is
	
	*** This module contains the Extra type specification (a function or a class can be extras).

	protecting IMP-MEMORY .

	vars v b : Var .
	var a : Var .
	var vl : VarList .
	var al : AritExpList .
	var N : Int .
	var mem : Memory .
	vars M M' : Memory .
	vars o o' : ObjectVar .
	var c : ClassName .
	var S : Stack .
	var z : ClassVar .

	sorts Extra ExtraList .
	subsort Extra < ExtraList .
	subsort Func < Extra .
	subsort Class < Extra .

	*** Combine definitions of functions and classes.
	op EmptyExtra : -> ExtraList [ctor] .
	op __ : ExtraList ExtraList -> ExtraList [ctor assoc comm id: EmptyExtra] .

	*** Define the type Script, a Prog type followed by, possibly, a list of Extra types.
	sort Script .
	op main{_} : Prog -> Script [ctor] .
	op main{_}_ : Prog ExtraList -> Script [ctor] .

	*** Define the syntax to give each function its own memory when called.
	op giveStack [___] : VarList AritExpList Memory -> Stack [ctor] .
	eq giveStack [ ( v, vl ) ( b, al ) mem ] = < v, mem [ b ] > giveStack [ vl al mem ] .
	eq giveStack [ ( v, vl ) ( N, al ) mem ] = < v, N > giveStack [ vl al mem ] .
	eq giveStack [ ( void ) ( void ) mem ] = EmptyStack .

	*** Give a Memory block for a function execution.
	*** This giveMemory function's last argument is an identifier if the function requesting
	*** memory belings to an object or not.
	op giveMemory [___[_;_]] (_) : VarList AritExpList Memory ObjectVar ClassName Memory -> Memory [ctor] .
	op None : -> ObjectVar [ctor] .
	eq giveMemory [ vl al M [o ; c] ] (EmptyMemory) = giveMemory [ vl al M o ] ([main] EmptyStack [this ; c] EmptyStack) .
	eq giveMemory [ (v, vl) (a, al) M ( [o ; c] ) ] (M') = 
		giveMemory [ vl al M [o ; c] ] (M' [ v / M [a] ]) .
	eq giveMemory [ (v, vl) (o, al) ( M [ o ; c ] S ) ( [o' ; c'] ) ] (M') = 
		giveMemory [ vl al ( M [ o ; c ] S ) ( [o' ; c'] ) ] (M' [ o ; c ] S) .
	eq giveMemory [ (v, vl) (o . v, al) ( M [ o ; c ] S < v, N > ) ( [o' ; c'] ) ] (M') = 
		giveMemory [ vl al ( M [ o ; c ] S < v, N > ) ( [o' ; c'] ) ] (M' [ v / N ]) .
	eq giveMemory [ (v, vl) (this . v, al) ( M [ this ; c ] S < v, N > ) ( [o' ; c'] ) ] (M') = 
		giveMemory [ vl al ( M [ this ; c ] S < v, N > ) ( [o' ; c'] ) ] (M' [ v / N ]) .
	eq giveMemory [ void void M None ] (M') = M' .
	eq giveMemory [ void void (M [o ; c] S) ( [o' ; c'] ) ] (M') = M' [this ; c] S . 

endfm






