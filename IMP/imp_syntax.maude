fmod VAR is

	*** This module defines the variables for the language

	protecting QID .

	sort Var .
	subsort Qid < Var .

endfm

fmod MEMORY is

	*** This is the memory module, which specifies how the language keeps track of 
	*** variable-value pairs.

	protecting VAR .
	protecting INT .

	sort MemoryCell Memory .
	subsort MemoryCell < Memory .

	op <_,_> : Var Int -> MemoryCell [ctor] .

	op EmptyMemory : -> Memory [ctor] .
	op __ : Memory Memory -> Memory [ctor comm assoc id: EmptyMemory] .

	var M : Memory .
	vars V V' : Var .
	vars N N' : Int .

	*** Change values or add elements to memory
	op _[_/_] : Memory Var Int -> Memory .
	eq (M < V, N >) [V / N'] = M < V, N' > .
	eq M [V / N] = M < V, N > [owise] .

	*** Access the value of a variable
	op _[_] : Memory Var ~> Int .
	eq (M < V, N >) [V] = N .

endfm


fmod IMP-SYNTAX is

	*** This module specifies the basic syntax

	protecting VAR .
	protecting CONVERSION .

	sorts AritExp BoolExp Prog .

	*** Syntax of boolean expresions
	ops true false : -> BoolExp [ctor] .
	op _=_ : AritExp AritExp -> BoolExp [comm prec 26] .
	op _!=_ : AritExp AritExp -> BoolExp [comm prec 26] .
	op _leq_ : AritExp AritExp -> BoolExp .
	op _geq_ : AritExp AritExp -> BoolExp .
	op not_ : BoolExp -> BoolExp .
	op _and_ : BoolExp BoolExp -> BoolExp [assoc comm] .
	op _or_ : BoolExp BoolExp -> BoolExp [assoc comm] .


	*** Syntax of arithmetic expressions
	subsort Var < AritExp .
	subsort Int < AritExp .
	op _+_ : AritExp AritExp -> AritExp [ditto] .
	op _-_ : AritExp AritExp -> AritExp [ditto] .
	op _*_ : AritExp AritExp -> AritExp [ditto] .

	*** Syntax of statements
	op skip : -> Prog [ctor] .
	op _:=_ : Var AritExp -> Prog [ctor prec 30] .
	op _;_ : Prog Prog -> Prog [ctor assoc] .
	op if_then_else_ : BoolExp Prog Prog -> Prog [ctor] .
	op while_do_ : BoolExp Prog -> Prog [ctor] .

endfm
