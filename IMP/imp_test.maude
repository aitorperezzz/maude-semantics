load imp_semantics.maude .

*** This file contains some tests for functionality of the IMP language.

*** Multiply two numbers.
rew exec ( main 
	{  
		'a = 2 ; 
		'b = 10 * 'a 
	} ) .

*** Implement the product as a standalone function.
rew exec ( main 
	{
		'a = 3 ; 
		'b = 1 ; 
		'c = 'product ('a, 2 * 'b) 
	}
	function 'product ('x, 'y) 
	{
		return 'x * 'y 
	} ) .

*** Test for the giveStack operator.
rew giveStack [ ('x, 'y) ('a, 2 * 'b) ; function 'product ('x, 'y) { return 'x * 'y } (< 'a, 3 > < 'b, 1 >) ] .

*** Test to run a function with a local stack.
rew < return 'x * 'y, function 'product ('x, 'y) { return 'x * 'y }, < 'x,3 > < 'y,2 > > .

*** When a function needs no arguments, void is passed.
rew exec ( main 
	{ 
		'c = 'number ( void )  
	}  
	function 'number ( void )  
	{ 
		return 3 * 2 
	} ) .

*** Test recursion with the factorial function.
rew exec ( main 
	{   
		'a = 5 ; 
		'f = 'factorial ( 'a ) 
	} 
 	function 'factorial ( 'x ) 
	{  
		if ( 'x == 1 ) 
		{ 
			return 1 
		} else { 
			return 'x * 'factorial ( 'x - 1 )  
		} 
	} ) .

*** Test multiple functions.
rew exec ( main 
	{ 
		'a1 = 1 ; 
		'a2 = 0 ; 
		'b1 = 3 ;
		'b2 = 1 ; 
		'f = 'squaredistance ('a1, 'a2, 'b1, 'b2) 
	} 
	function 'squaredistance ('ax, 'ay, 'bx, 'by) 
	{
		return 'square('ax - 'bx) + 'square('ay - 'by)  
	} 
	function 'square ('x) 
	{
		return 'x * 'x 
	} ) . 


