fmod IMP-TYPES is

	*** This module defines the sorts of the language.

	protecting QID .
	protecting INT .

	sorts NumVar ArrayVar Var Array .
	subsort Qid < NumVar .
	subsort Qid < ArrayVar .
	subsort NumVar < Var .
	subsort ArrayVar < Var .

	sort Type .
	subsort Int < Type .
	subsort Array < Type .

	sort AritExp .
	subsort Int < AritExp .	
	subsort NumVar < AritExp .

	sort BoolExp .

	sort Prog .

endfm

fmod IMP-ARRAYS is
	
	*** This module defines the arrays in the language.

	protecting IMP-TYPES .

	vars n m : Nat .
	var i : Int .
	var il : IntList .
	var A : Array .

	*** Define a list of integers.
	sort IntList .
	subsort Int < IntList .
	op void : -> IntList [ctor] .
	op _,_ : IntList IntList -> IntList [ctor assoc id: void] .

	*** There is a special Int, which is undefined.
	op undefined : -> Int [ctor] .
	
	*** An array is a list of integers, enclosed in square brackets.
	op [_] : IntList -> Array [ctor] .

	*** Extract a certain element in an array.
	op extract [_;_;_] : Nat Nat Array -> Int [ctor] .
	eq extract [ n ; n ; [ i, il ] ] = i .
	ceq extract [ n ; m ; [ i, il ] ] = extract [ n ; s(m) ; [ il ] ]  
		if m < n .
	ceq extract [ n ; m ; A ] = undefined if m > n .

	*** Access an element of the array.
	op _[_] : Array Nat -> Int [ctor] .
	eq A [ n ] = extract [ n ; 0 ; A ] .

endfm

fmod IMP-STACK is

	*** This module specifies the stack, which is a list of variable-type pairs.

	protecting IMP-ARRAYS .

	sorts StackCell Stack .
	subsort StackCell < Stack .

	op <_,_> : Var Type -> StackCell [ctor] .

	op NoStack : -> Stack [ctor] .
	op __ : Stack Stack -> Stack [ctor comm assoc id: NoStack] .

	var S : Stack .
	vars v v' : Var .
	vars t t' : Type .

	*** Change or add elements to the stack.
	op _[_/_] : Stack Var Type -> Stack .
	eq (S < v, t >) [v / t'] = S < v, t' > .
	eq S [v / t] = S < v, t > [owise] .

	*** Access an element in the stack, if it is there.
	op _[_] : Stack Var ~> Type .
	eq (S < v, t >) [v] = t .

endfm


