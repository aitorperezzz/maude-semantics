load oimp_syntax.maude .

mod OBJECTIVEIMP-INITIALPARSE is
	
	*** Define the initial parsing rules.

	protecting OBJECTIVEIMP-POST-EXECUTION .

	var P : Prog .
	var fl : FuncList .
	var cl : ClassList .

	*** Complete the execution statement in case the user has not given all information.
	rl [exec-nofunc] : exec ( main {P} cl ) => exec ( main {P} NoFunc cl ) .
	rl [exec-noclass] : exec ( main {P} fl ) => exec ( main {P} fl NoClass ) .
	rl [exec-nothing] : exec ( main {P} ) => exec ( main {P} NoFunc NoClass ) .

	rl [initial-parse] : exec ( main {P} fl cl ) => < P, ([main] fl), cl, NoMemory > .

endm

mod OBJECTIVEIMP-BASIC-SEMANTICS is

	*** In this module, the basic rewrite rules for the language are specified.

	protecting OBJECTIVEIMP-INITIALPARSE .

	vars n m : Int .
	vars b b' : BoolExp .
	vars M M' M'' : Memory .
	var z : Var .
	vars A B : AritExp .
	vars P P' : Prog .
	var fb : FuncBlock .
	var cl : ClassList .

	*** Evaluation of a number.
	rl [numbers] :  < n, fb, cl, M > => n .

	*** Evaluation of a variable.
	rl [var] : < z, fb, cl, M > => M [z] .

	*** Evaluation of arithmetic expressions.
	crl [arit-sum] : < A + B, fb, cl, M > => n + m
		if < A, fb, cl, M > => n /\ < B, fb, cl, M > => m .

	crl [arit-sub] : < A - B, fb, cl, M > => n - m
		if < A, fb, cl, M > => n /\ < B, fb, cl, M > => m .

	crl [arit-prod] : < A * B, fb, cl, M > => n * m
		if < A, fb, cl, M > => n /\ < B, fb, cl, M > => m .


	*** Evaluation of boolean expressions.
	rl [true] : < true, fb, cl, M > => true .
	rl [false] : < false, fb, cl, M > => false .

	crl [bool-equal-true] : < A == B, fb, cl, M > => < true, fb, cl, M >
		if < A, fb, cl, M > => m /\ < B, fb, cl, M > => m .
	crl [bool-equal-false] : < A == B, fb, cl, M > => < false, fb, cl, M >
		if < A, fb, cl, M > => m /\  < B, fb, cl, M > => n /\ m =/= n .
	crl [bool-diff-true] : < A != B, fb, cl, M > => < true, fb, cl, M >
		if < A == B, fb, cl, M > => < false, fb, cl, M > .
	crl [bool-diff-false] : < A != B, fb, cl, M > => < false, fb, cl, M > 
		if < A == B, fb, cl, M > => < true, fb, cl, M > .

	crl [leq-true] : < A leq B, fb, cl, M > => < true, fb, cl, M >
		if < A, fb, cl, M > => m  /\  < B, fb, cl, M > => n /\ m <= n .
	crl [leq-false] : < A leq B, fb, cl, M > => < false, fb, cl, M >
		if < A, fb, cl, M > => m /\ < B, fb, cl, M > => n /\ m > n .
	crl [geq-true] : < A geq B, fb, cl, M > => < true, fb, cl, M >
		if < A, fb, cl, M > => m /\ < B, fb, cl, M > => n /\ m >= n .
	crl [geq-false] : < A geq B, fb, cl, M > => < false, fb, cl, M >
		if < A, fb, cl, M > => m /\ < B, fb, cl, M > => n /\ m < n .

	crl [bool-not-true] : < not b, fb, cl, M > => < true, fb, cl, M >
		if < b, fb, cl, M > => < false, fb, cl, M > .
	crl [bool-not-false] : < not b, fb, cl, M > => < false, fb, cl, M >
		if < b, fb, cl, M > => < true, fb, cl, M > .

	crl [bool-or-true] : < b or b', fb, cl, M > => < true, fb, cl, M >
		if < b, fb, cl, M > => < true, fb, cl, M > /\ < b', fb, cl, M > => < true, fb, cl, M > .
	crl [bool-or-true] : < b or b', fb, cl, M > => < true, fb, cl, M >
		if < b, fb, cl, M > => < true, fb, cl, M > /\ < b', fb, cl, M > => < false, fb, cl, M > .
	crl [bool-or-true] : < b or b', fb, cl, M > => < true, fb, cl, M >
		if < b, fb, cl, M > => < false, fb, cl, M > /\ < b', fb, cl, M > => < true, fb, cl, M > .
	crl [bool-or-false] : < b or b', fb, cl, M > => < false, fb, cl, M >
		if < b, fb, cl, M > => < false, fb, cl, M > /\ < b', fb, cl, M > => < false, fb, cl, M > .

	crl [bool-and-true] : < b and b', fb, cl, M > => < true, fb, cl, M >
		if < b, fb, cl, M > => < true, fb, cl, M > /\ < b', fb, cl, M > => < true, fb, cl, M > .
	crl [bool-and-false] : < b and b', fb, cl, M > => < false, fb, cl, M >
		if < b, fb, cl, M > => < false, fb, cl, M > /\ < b', fb, cl, M > => < true, fb, cl, M > .
	crl [bool-and-false] : < b and b', fb, cl, M > => < false, fb, cl, M >
		if < b, fb, cl, M > => < true, fb, cl, M > /\ < b', fb, cl, M > => < false, fb, cl, M > .
	crl [bool-and-false] : < b and b', fb, cl, M > => < false, fb, cl, M >
		if < b, fb, cl, M > => < false, fb, cl, M > /\ < b', fb, cl, M > => < false, fb, cl, M > .


	*** Execution of statements.
	crl [prog-assign] : < z = A, fb, cl, M > => < skip, fb, cl, M[z / n] >
		if < A, fb, cl, M > => n .

	crl [prog-comp] : < P ; P', fb, cl, M > => < skip, fb, cl, M' >
		if < P, fb, cl, M > => < skip, fb, cl, M'' > /\
		< P', fb, cl, M'' > => < skip, fb, cl, M' > .

	crl [prog-if-true] : < if (b) {P} else {P'}, fb, cl, M > => < P, fb, cl, M >
		if < b, fb, cl, M > => < true, fb, cl, M > .
	crl [prog-if-false] : < if (b) {P} else {P'}, fb, cl, M > => < P', fb, cl, M >
		if < b, fb, cl, M > => < false, fb, cl, M > .

	crl [prog-while-true] : < while (b) {P}, fb, cl, M > => < skip, fb, cl, M' >
		if < b, fb, cl, M > => < true, fb, cl, M > /\
		< P ; while (b) {P}, fb, cl, M > => < skip, fb, cl, M' > .
	crl [prog-while-false] : < while (b) {P}, fb, cl, M > => < skip, fb, cl, M >
		if < b, fb, cl, M > => < false, fb, cl, M > .

endm


mod OBJECTIVEIMP-FUNCTIONS-SEMANTICS is
	
	*** Specifies the semantics of function calls.

	protecting OBJECTIVEIMP-BASIC-SEMANTICS .

	var n : Int .
	vars P P' : Prog .
	vars M M' M'' M''' : Memory .
	var v : NumVar .
	vars z z' : Var .
	var oi : ObjectId .
	var o : Object .
	var c : ClassName .
	var f : FuncName .
	var i : Input .
	var il : InputList .
	***var ar : Arg .
	vars arl arl' : ArgList .
	var a : AritExp .
	vars fb fb' fb'' : FuncBlock .
	vars cl cl' cl'' : ClassList .
	var fl : FuncList .
	var ot : ObjTrackList .

	*** Semantics of the return operation (only present in functions).
	crl [return] : < return a, fb, cl, M > => < skip, fb, cl, M[ 'return / n ] >
		if < a, fb, cl, M > => n .

	*** Rewrite the "arithmetic" kind of function call to a preExec operation.
	*** Pass the main functions on the fly. It can only return one value, no objects can be updated.
	crl [globalfunc-arit] : < f (arl), fb ([main] (fl function f (il) {P})), cl, M > => M''[ 'return ] if 
		preExec [ il ; arl ; None ; NoTrack ; fb ([main] (fl function f (il) {P})), cl, M / P, ([main] (fl function f (il) {P})), NoClass, NoMemory ] => 
		preExec [ void ; void ; None ; ot ; fb ([main] (fl function f (il) {P})), cl, M / P', fb', cl', M' ] /\ 
		< P', fb', cl', M' > => < skip, fb'', cl'', M'' > .
		
	*** Rewrite the "run" kind of function call. Objects can be updated but no value can be returned.
	*** Pass the main functions on the fly.
	crl [globalfunc-run] : < run f (arl), fb ([main] (fl function f(il){P})), cl, M > => < skip, fb, cl, M''' > if 
		preExec [ il ; arl ; None ; NoTrack ; fb ([main] (fl function f (il) {P})), cl, M / P, ([main] (fl function f (il) {P})), NoClass, NoMemory ] => 
		preExec [ void ; void ; None ; ot ; fb ([main] (fl function f (il) {P})), cl, M / P', fb', cl', M' ] /\ 
		< P', fb', cl', M' > => < skip, fb'', cl'', M'' > /\ 
		postExec [ ot, None ; M / M'' ] => M''' .

	*** Evaluate the arguments inside the preExec operator.
	crl preExec [ (v, il) ; (a, arl) ; oi ; ot ; fb, cl, M / P', fb', cl', M' ] => 
		preExec [ (v, il) ; (n, arl) ; oi ; ot ; fb, cl, M / P', fb', cl', M' ] 
		if < a, fb, cl, M > => n .

endm

mod OBJECTIVEIMP-OBJECTS-SEMANTICS is 

	*** This module specifies the semantics of objects.

	protecting OBJECTIVEIMP-FUNCTIONS-SEMANTICS .

	var n : Int .
	var v : NumVar .
	var o : Object .
	var c : ClassName .
	var il : InputList .
	var arl : ArgList .
	var f : FuncName .
	vars M M' M'' M''' : Memory .
	vars P P' : Prog .
	vars S S' : Stack .
	vars fb fb' fb'' : FuncBlock .
	vars cl cl' cl'' : ClassList .
	vars fl fl' : FuncList .
	var ot : ObjTrackList .

	*** Declare a new object.
	crl [newobject] : < o = new c (arl), fb ([main] fl), cl class c { constructor (il) {P} fl'}, M > => 
		< skip, fb ([main] fl) ([ o ] fl'), cl class c { constructor(il) {P} fl'}, M ([ o ] S) > if 
		preExec [ il ; arl ; None ; NoTrack ; fb ([main] fl), cl class c { constructor(il) {P} }, M / P, ([main] fl), NoClass, ([ this ] NoStack) ] => 
		preExec [ void ; void ; None ; ot ; fb ([main] fl), cl class c { constructor(il) {P} }, M / P', fb', cl', M' ] /\ 
		< P', fb', cl', M' > => < skip, fb'', cl'', M'' ([ this ] S) > .

	*** Rewrite the "arithmetic" kind of function belonging to an object. This only returns a value.
	*** Pass main functions on the fly.
	crl [objfunc-arit] : < ( o . f ) (arl), (fb ([ o ] (fl function f (il) {P})) ([main] fl)), cl, M > => M''[ 'return ] if 
		preExec [ il ; arl ; [ o ] ; NoTrack ; (fb ([ o ] (fl function f (il) {P})) ([main] fl)), cl, M /  P, ([main] fl), NoClass, NoMemory ] => 
		preExec [ void ; void ; None ; ot ; (fb ([ o ] (fl function f (il) {P})) ([main] fl)), cl, M /  P', fb', cl', M' ] /\ 
		< P', fb', cl', M' > => < skip, fb'', cl'', M'' > .

	*** Rewrite the "run" kind of function, when it belongs to an object.
	*** Pass the main functions on the fly.
	crl [objfunc-run] : < run ( o . f ) (arl), (fb ([ o ] (fl function f (il) {P})) ([main] fl)), cl, M > => 
		< skip, (fb ([ o ] (fl function f (il) {P})) ([main] fl)), cl, M''' > if 
		preExec [ il ; arl ; [ o ] ; NoTrack ; (fb ([ o ] (fl function f (il) {P})) ([main] fl)), cl, M / P, ([main] fl), NoClass, NoMemory ] => 
		preExec [ void ; void ; None ; ot ; (fb ([ o ] (fl function f (il) {P})) ([main] fl)), cl, M / P', fb', cl', M' ] /\ 
		< P', fb', cl', M' > => < skip, fb'', cl'', M'' > /\ 
		postExec [ ot, [ o ] ; M / M'' ] => M''' .

endm


