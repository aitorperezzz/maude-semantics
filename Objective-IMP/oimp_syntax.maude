fmod OBJECTIVEIMP-BASICS is

	*** This module defines the basic sorts and syntax.

	protecting QID .
	protecting INT .

	*** Define the types relevant to the language.
	sorts NumVar Object ObjectVar Var .
	subsort Qid < NumVar .
	subsort Qid < Object .
	subsort NumVar < Var .
	subsort ObjectVar < Var .

	*** Define the arithmetic expressions.
	sort AritExp .
	subsort Int < AritExp .
	subsort Var < AritExp .
	op _+_ : AritExp AritExp -> AritExp [ditto] .
	op _-_ : AritExp AritExp -> AritExp [ditto] .
	op _*_ : AritExp AritExp -> AritExp [ditto] .

	*** Define the boolean expressions.
	sort BoolExp .
	ops true false : -> BoolExp [ctor] .
	op _==_ : AritExp AritExp -> BoolExp [comm prec 34] .
	op _!=_ : AritExp AritExp -> BoolExp [comm prec 34] .
	op _l_ : AritExp AritExp -> BoolExp [prec 31] .
	op _g_ : AritExp AritExp -> BoolExp [prec 31] .
	op _leq_ : AritExp AritExp -> BoolExp [prec 31] .
	op _geq_ : AritExp AritExp -> BoolExp [prec 31] .
	op not_ : BoolExp -> BoolExp [prec 36] .
	op _and_ : BoolExp BoolExp -> BoolExp [assoc comm prec 35] .
	op _or_ : BoolExp BoolExp -> BoolExp [assoc comm prec 37] .

	*** Define the statements of the language.
	sort Prog .
	op skip : -> Prog [ctor] .
	op _=_ : Var AritExp -> Prog [ctor prec 40] .
	op _;_ : Prog Prog -> Prog [ctor assoc prec 41] .
	op if (_) {_} else {_} : BoolExp Prog Prog -> Prog [ctor prec 40] .
	op while (_) {_} : BoolExp Prog -> Prog [ctor prec 40] .
	op return _ : AritExp -> Prog [ctor prec 40] .

endfm

fmod OBJECTIVEIMP-FUNCTIONS-SYNTAX is
	
	*** This module gives some definitions for the functions.

	protecting OBJECTIVEIMP-BASICS .

	*** Define what can be used to define a function, which are variables or objects.
	sorts Input InputList .
	subsort Input < InputList .
	subsort Object < Input .
	subsort NumVar < Input .
	op void : -> Object [ctor] .
	op _,_ : InputList InputList -> InputList [ctor assoc id: void] .

	*** Define a list of what can be passed to a function: arithmetic expressions 
	*** or objects.
	sorts Arg ArgList .
	subsort Arg < ArgList .
	subsort InputList < ArgList .
	subsort AritExp < Arg .
	subsort Object < Arg .
	op _,_ : ArgList ArgList -> ArgList [ditto] .

	*** Define the function types.
	sorts NumFunc ObjFunc .
	subsort Qid < NumFunc .

	*** Specify how to declare a function.
	sort FuncDef .
	op function _ (_) {_} : NumFunc InputList Prog -> FuncDef [ctor] .
	
	*** There are two ways to call a numerical function, with return value 
	*** or without it.
	sort FuncCall .
	subsort FuncCall < AritExp .
	op _(_) : NumFunc ArgList -> FuncCall [ctor prec 29] .
	op run _ : FuncCall -> Prog [ctor prec 40] .

	*** Define a list of functions.
	sort FuncList .
	subsort FuncDef < FuncList .
	op NoFunc : -> FuncList [ctor] .
	op __ : FuncList FuncList -> FuncList [ctor assoc comm id: NoFunc] .

endfm

fmod OBJECTIVEIMP-OBJECTS-SYNTAX is

	*** This module gives definitions for the objects.

	protecting OBJECTIVEIMP-FUNCTIONS-SYNTAX .

	sorts Class ClassName .
	subsort Qid < ClassName .

	*** Declare a class.
	op class _ {_} : ClassName FuncList -> Class [ctor] .

	*** Define a list of class declarations (which will be put at the end of a script).
	sort ClassList .
	subsort Class < ClassList .
	op NoClass : -> ClassList [ctor] .
	op __ : ClassList ClassList -> ClassList [ctor assoc comm id: NoClass] .

	*** A special function in a class is the constructor function.
	op constructor(_) {_} : InputList Prog -> FuncDef [ctor] .

	*** Create an object with a defined class.
	op _ = new _ (_) : Object ClassName ArgList -> Prog [ctor prec 40] .

	*** Define the object variables.
	op this : -> Object [ctor] .
	op _ . _ : Object NumVar -> ObjectVar [ctor prec 30] .

	*** Object functions (called methods) can also be called in two ways:
	*** with and without return value.
	op _ . _ : Object FuncCall -> FuncCall [ctor prec 30] .

	*** Define an object identifier.
	sort ObjectId .
	op [_] : Object -> ObjectId [ctor] .
	op None : -> ObjectId [ctor] .

endfm

fmod OBJECTIVEIMP-STACK is

	*** This module specifies the Stack, which is a long list of 
	*** variable-value pairs. There is a main Stack, and each object 
	*** initialized has its own stack.

	protecting OBJECTIVEIMP-OBJECTS-SYNTAX .

	vars n n' : Int .
	vars v v' : NumVar .
	var S : Stack .
	
	sorts StackCell Stack .
	subsort StackCell < Stack .

	op <_,_> : NumVar Int -> StackCell [ctor] .

	op NoStack : -> Stack [ctor] .
	op __ : Stack Stack -> Stack [ctor comm assoc id: NoStack] .

	*** Change values or add elements to the stack.
	op _[_/_] : Stack NumVar Int -> Stack .
	eq (S < v, n >) [v / n'] = S < v, n' > .
	eq S [v / n] = S < v, n > [owise] .

	*** Access the value of a variable in the stack, if it is there.
	op _[_] : Stack NumVar ~> Int .
	eq (S < v, n >) [v] = n .

endfm

fmod OBJECTIVEIMP-MEMORY is
	
	*** This module specifies the Memory: first a Stack of main variables followed by a 
	*** Stack for each object defined.

	protecting OBJECTIVEIMP-STACK .

	vars n n' : Int .
	var c : ClassName .
	var o : Object .
	var v : NumVar .
	var M : Memory .
	var S : Stack .

	*** Define the Memory type and the grouping of different Memory types.
	sort Memory .
	op [main] _ : Stack -> Memory [ctor] .
	op __ : ObjectId Stack -> Memory [ctor] .
	op NoMemory : -> Memory [ctor] .
	op __ : Memory Memory -> Memory [ctor assoc comm id: NoMemory] .
	eq NoMemory = ( [main] NoStack ) .

	*** Access elements in memory.
	*** Global variables.
	op _[_] : Memory NumVar ~> Int [ctor] .
	eq (M [main] ( S < v, n > ) ) [v] = n .
	*** Object variables.
	op _[_] : Memory ObjectVar ~> Int [ctor] .
	eq (M [ o ] ( S < v, n > ) ) [ ( o . v ) ] = n .

	*** Change or add elements to memory.
	*** Global variables.
	op _[_/_] : Memory NumVar Int -> Memory [ctor] .
	eq (M ([main] S) ) [v / n'] = M ([main] (S [ v / n' ]) ) .
	eq M [v / n] = M ([main] < v, n > ) [owise] .
	*** Object variables.
	op _[_/_] : Memory ObjectVar Int -> Memory [ctor] .
	eq (M [ o ] S) [ ( o . v )  / n'] = M [ o ] (S[ v / n' ]) .
	eq M [ ( o . v ) / n] = M ([ o ] < v, n >) [owise] .

endfm

fmod OBJECTIVEIMP-FUNCBLOCKS is
	
	*** This module defines the function blocks. The design is similar to Memory.

	protecting OBJECTIVEIMP-MEMORY .

	sort FuncBlock .
	op [main] _ : FuncList -> FuncBlock [ctor] .
	op  __ : ObjectId FuncList -> FuncBlock [ctor] .
	op NoFuncBlock : -> FuncBlock [ctor] .
	op __ : FuncBlock FuncBlock -> FuncBlock [ctor assoc comm id: NoFuncBlock] .

	eq NoFuncBlock = ([main] NoFunc) .

endfm

fmod OBJECTIVEIMP-SCRIPT is

	*** Define a script and the execution sorts.

	protecting OBJECTIVEIMP-FUNCBLOCKS .

	*** Define a script. The function definitions have to come first when writing 
	*** a script.
	sort Script .
	op main{_} : Prog -> Script [ctor] .
	op main{_}_ : Prog FuncList -> Script [ctor] .
	op main{_}_ : Prog ClassList -> Script [ctor] .
	op main{_}__ : Prog FuncList ClassList -> Script [ctor] .

	*** Define an execution.
	sorts Exec AritExec BoolExec .
	subsort AritExp < AritExec .
	subsort BoolExp < BoolExec .
	op exec _ : Script -> Exec [ctor] .
	op <_,_,_,_> : Prog FuncBlock ClassList Memory -> Exec [ctor] .
	op <_,_,_,_> : AritExp FuncBlock ClassList Memory -> AritExec [ctor] .
	op <_,_,_,_> : BoolExp FuncBlock ClassList Memory -> BoolExec [ctor] .

endfm

fmod OBJECTIVEIMP-PRE-EXECUTION is
	
	*** This module specifies how to give a function call a personalized execution:
	*** the preExec operator will give each function call its own memory and function
	*** blocks.

	protecting OBJECTIVEIMP-SCRIPT .

	var n : Int .
	var v : NumVar .
	var arl : ArgList .
	vars fb fb' : FuncBlock .
	var fl : FuncList .
	var il : InputList .
	vars P P' : Prog .
	vars cl cl' : ClassList .
	vars M M' : Memory .
	vars o o' : Object .
	var S : Stack .
	var oi : ObjectId .
	var ot : ObjTrackList .

	*** When a function is called, we need to keep track of the objects' names outside and 
	*** inside the function. Define the ObjTrack sort. On the left, the name outside the function.
	*** On the right, the name inside.
	sorts ObjTrack ObjTrackList .
	op {_,_} : Object Object -> ObjTrack [ctor] .
	subsort ObjTrack < ObjTrackList .
	op NoTrack : -> ObjTrackList [ctor] .
	op __ : ObjTrackList ObjTrackList -> ObjTrackList [ctor assoc comm id: NoTrack] .

	*** Define a pre-execution.
	sort PreExec .
	op preExec [_;_;_;_;_,_,_/_,_,_,_] : InputList ArgList ObjectId ObjTrackList FuncBlock ClassList Memory Prog FuncBlock ClassList Memory -> PreExec [ctor] .
	
	*** When an object is passed to a function, pass all its functions and variables, and update the track list 
	*** of objects.
	eq preExec [ (o', il) ; (o, arl) ; oi ; ot ; fb ([ o ] fl), cl, M ([ o ] S) / P', fb', cl', M' ] = 
		preExec [ il ; arl ; oi ; ot { o , o' } ; fb ([ o ] fl), cl, M ([ o ] S) / P', fb' ([ o' ] fl), cl', M' ([ o' ] S) ] .

	*** When an arithmetic expression is passed, a rewrite rule in the semantics file 
	*** will transform it to a number.
	*** When a number is passed, update the main memory inside the function.
	eq preExec [ (v, il) ; (n, arl) ; oi ; ot ; fb, cl, M / P', fb', cl', M' ] = 
		preExec [ il ; arl ; oi ; ot ; fb, cl, M / P', fb', cl', M'[ v / n ] ] .

	*** In case the input list is empty and an object called its own method, pass its variables and functions 
	*** in the "this" block.
	eq preExec [ void ; void ; [ o ] ; ot ; fb ([ o ] fl), cl, M ([ o ] S) / P', fb', cl', M' ] = 
		preExec [ void ; void ; None ; ot { o, this } ; fb ([ o ] fl), cl, M ([ o ] S) / P', fb' ([ this ] fl), cl', M' ([ this ] S) ] .

endfm

fmod OBJECTIVEIMP-POST-EXECUTION  is

	*** This module specifies how to update objects after a function executes.

	protecting OBJECTIVEIMP-PRE-EXECUTION  .

	vars o o' : Object .
	var ot : ObjTrackList .
	vars M M' : Memory .
	vars S S' : Stack .
	var oi : ObjectId .

	*** To the left, the memory inside the function. To the right, the memory outside.
	sort PostExec .
	op postExec [_,_;_/_] : ObjTrackList ObjectId Memory Memory -> PostExec [ctor] .
	
	*** For each object inside the object-tracking list, update the global variables.
	eq postExec [ ( { o, o' } ot), oi ; M' ([ o' ] S') / M ([ o ] S) ] = 
		postExec [ ot, oi ; M' ([ o' ] S') / M ([ o ] S') ] .

	*** If an object called its own method, update its memory stack.
	eq postExec [ NoTrack, [ o ] ; M' ([ this ] S') / M ([ o ] S) ] = 
		postExec [ NoTrack, None ; M' ([ this ] S') / M ([ o ] S') ] .

endfm




